import groovy.util.slurpersupport.GPathResult

//统一工程名，不使用根目录名。
rootProject.name = "gh_android"

println("--ggggg--$rootDir.absolutePath")

//初始化各个组件配置信息
def configFile = new File("/Users/gh/Desktop/android/android_projects/Component/component_config/lib_config/components_configs.xml")
//def configFile = new File("../../component_config/lib_config/components_configs.xml")
def componentConfigXml = null
try {
    componentConfigXml = new XmlSlurper().parse(configFile)
} catch (Exception e) {
    println(e)
}

//初始化各个组件版本信息
def versionFile = new File("/Users/gh/Desktop/android/android_projects/Component/component_config/lib_config/components_version.xml")
//def versionFile = new File("../../component_config/lib_config/components_version.xml")
def allComponentConfigXml = null
try {
    allComponentConfigXml = new XmlSlurper().parse(versionFile)
} catch (Exception e) {
    println(e)
}

//校验版本信息中的组件数量,计数算出来的版本信息与配置的版本信息作对比
def componentSize = allComponentConfigXml.component.size() + allComponentConfigXml.depthFirst().findAll { it.name() == "dependency" }.size()
if (allComponentConfigXml.@componentCount != componentSize.toString()) {
    throw new Exception("components_version.xml中componentCount=${allComponentConfigXml.@componentCount}与component个数${componentSize}不一致，核对组件配置是否缺失")
}

/**
 * assembleType 构建方式
 * 0：有配置文件构建apk，按照components_configs.xml配置文件
 * 1：无配置文件构建apk，全部使用源码
 * 2：构建aar，全部使用源码（如果使用aar，需要考虑依赖打包顺序的问题）
 */
def assembleType = 0
if (isPublishAar()) {
    assembleType = 2
} else if (!configFile.exists()) {
    assembleType = 1
}

//将组件版本和组件配置信息存为gradle全局变量
//构建方式
gradle.ext.assembleType = assembleType
//数组
gradle.ext.allComponents = allComponentConfigXml.component
//是否编译混淆
gradle.ext.enable_proguard = componentConfigXml?.buildOptions?.enable_proguard != "false"

//以version配置文件为主,下面两个方法为把version完善
//components_version.xml中使用父组件的aarVersion填充子组件的aarVersion，方便后续数据的使用。
allComponentConfigXml.depthFirst().each { GPathResult component ->
    if (component.name() == "dependency") {
        component.@aarVersion = component.parent().@aarVersion.text()
    }
}

//有配置文件构建apk时，将components_configs.xml组件配置信息合并到components_version.xml中，方便后续数据的使用。
//处理子组件的配置联动，使用其父组件的配置
if (gradle.assembleType == 0) {
    //是否开启了全部使用源码快捷配置
    gradle.ext.all_use_sourcecode = componentConfigXml?.buildOptions?.all_sourcecode == "true"
    allComponentConfigXml.depthFirst().each { GPathResult component ->
        if (component.name() == "component") {
            def foundComponent = componentConfigXml?.project?.component?.find { it.@project == component.@project }
            component.@include = foundComponent?.@include?.text() ?: "true"
            if (gradle.all_use_sourcecode) {
                component.@aar = "false"
            } else {
                component.@aar = foundComponent?.@aar?.text() ?: "true"
            }
        } else if (component.name() == "dependency") {
            component.@include = component.parent().@include.text()
            if (gradle.all_use_sourcecode) {
                component.@aar = "false"
            } else {
                component.@aar = component.parent().@aar.text()
            }
        }
    }
}

//日志输出
println("--base-setting.gradle------------------------------------------")
switch (gradle.assembleType) {
    case 0:
        println("--有配置文件构建apk--")
        gradle.allComponents.depthFirst().each { component ->
            if (component.name() != "component" && component.name() != "dependency") return
            def componentName = component.@project.text()
            def aarVersion = component.@aarVersion.text()
            def include = component.@include.text()
            def aar = component.@aar.text()
            if (include == "false") return
            if (aar != "false") {
                println("--构建$componentName:使用aar--$rootProject.name:$componentName:$aarVersion")
            } else {
                println("--构建$componentName:使用源码--:$componentName")
            }
        }
        break
    case 1:
        println("--无配置文件构建apk:使用源码--")
        break
    case 2:
        println("--构建aar：使用源码--")
        break
}

if (gradle.assembleType != 2) {
    if (gradle.enable_proguard) {
        println("--混淆:开启--")
    } else {
        println("--混淆:关闭--")
    }
}
println("--base-setting.gradle------------------------------------------")

//定义全局替换规则
gradle.allprojects { subProject ->
    if (subProject == subProject.rootProject && gradle.assembleType == 2) {
        afterEvaluate {
            //处理构建aar时的联动依赖,相互关联的库:lib_core,lib_common
            //lib_common上传maven依赖lib_core上传maven,两个库同时上传
            gradle.allComponents.depthFirst().each { component ->
                if (component.name() == "dependency") {
                    def parentProjectName = component.parent().@project.text()
                    def projectName = component.@project.text()
                    project(":${parentProjectName}").getTasksByName("publishAar", false)[0].dependsOn project(":${projectName}").getTasksByName("publishAar", false)
                }
            }
        }
        return
    }

//    subProject.configurations.all {
//        resolutionStrategy {
//            dependencySubstitution {
//                //println("--ggggggg--$rootProject.name:lib_component")
//                //gh_android:lib_component
//                substitute module("$rootProject.name:lib_component") using project(":lib_component")
//            }
//        }
//    }

    //无配置文件构建apk或者构建aar时全部使用源码
    if (gradle.assembleType == 1 || gradle.assembleType == 2) {
        subProject.configurations.all {
            resolutionStrategy {
                dependencySubstitution {
                    gradle.allComponents.depthFirst().each { component ->
                        if (component.name() != "component" && component.name() != "dependency") return
                        def componentName = component.@project.text()
                        //构建aar，全部使用源码
                        substitute module("$rootProject.name:$componentName") using project(":$componentName")
                    }
                }
            }
        }
    }

    //有配置文件构建apk时按照配置
    if (gradle.assembleType == 0) {
        //本地components_configs构建apk时剔除不参与编译的组件的aar依赖
        configurations {
            gradle.allComponents.depthFirst().each { component ->
                if (component.name() != "component" && component.name() != "dependency") return
                if ((component.name() == "component" || component.name() == "dependency")
                        && component.@project.text() != null && component.@include == "false") {
                    implementation { exclude group: "$rootProject.name", module: component.@project.text() }
                    implementation { exclude group: rootProject.name, module: component.@project.text() }
                }
            }
        }
        subProject.configurations.all {
            resolutionStrategy {
                dependencySubstitution {
                    gradle.allComponents.depthFirst().each { component ->
                        if (component.name() != "component" && component.name() != "dependency") return
                        def componentName = component.@project.text()
                        def aarVersion = component.@aarVersion.text()
                        def include = component.@include.text()
                        def aar = component.@aar.text()
                        if (include == "false") return
                        if (aar != "false") {
                            substitute module("$rootProject.name:$componentName") using module("$rootProject.name:$componentName:$aarVersion")
                        } else {
                            println("--ggggg--$rootProject.name:$componentName")
                            println("--ggggg--:$componentName")
                            substitute module("$rootProject.name:$componentName") using project(":$componentName")
                        }
                    }
                }
            }
        }
    }
}

//是否是发布aar
def isPublishAar() {
    for (String task : gradle.startParameter.taskNames) {
        if (task.contains("publishAar") || task.contains("uploadArchives")) {
            return true
        }
    }
    return false
}

if (gradle.assembleType == 0) {
    //本地构建apk，根据components_configs配置include组件
    gradle.allComponents.depthFirst().each { component ->
        if (component.name() != "component" && component.name() != "dependency") return

        if (component.@include == "false") {
            println "${component.@project}：不参与编译"
        }
        if (component.@include != "false" && component.@aar != "false") {
            println "${component.@project}：使用aar"
        }
        if (component.@include != "false" && component.@aar == "false") {
            include ":${component.@project}"
            println "${component.@project}：使用源码"
        }

        println("ggggg include ${component.@project}")
        println("ggggg include ${component.@project.name()}")
        println("ggggg include ${component.@project.text()}")
        def includeName = component.@project.text().split("_")[1]
        println("ggggg include $includeName")
        project(":lib_$includeName").projectDir = "../component_$includeName/lib_$includeName" as File
    }
} else {
    //构建aar或Jenkins构建apk，所有组件都include
    gradle.allComponents.depthFirst().each { component ->
        if (component.name() != "component" && component.name() != "dependency") return
        include ":${component.@project}"

    }
}